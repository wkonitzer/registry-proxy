apiVersion: v1
kind: Namespace
metadata:
  name: proxy-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: configmap-editor
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list", "get"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "update", "patch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["list", "get"]   
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy-server-serviceaccount
  namespace: proxy-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: update-configmap
subjects:
- kind: ServiceAccount
  name: proxy-server-serviceaccount
  namespace: proxy-server
roleRef:
  kind: ClusterRole
  name: configmap-editor
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: updater-script
  namespace: proxy-server
data:
  update-config.sh: |
    #!/bin/sh

    NAMESPACE=${MY_POD_NAMESPACE:-default}

    echo "Starting config-updater script in namespace $NAMESPACE."

    echo "Fetching service Cluster IP..."

    CLUSTER_IP=$(kubectl get svc proxy-service -n $NAMESPACE -o=jsonpath='{.spec.clusterIP}')

    # Check if the kubectl command was successful
    if [ $? -ne 0 ]; then
        echo "Error fetching Cluster IP"
        sleep 15
        continue
    fi

    # Check if the fetched IPs are empty
    if [ -z "$CLUSTER_IP" ]; then
        echo "No Cluster IP found."
        sleep 15
        continue
    fi

    echo "Cluster IP: $CLUSTER_IP"

    # Write to a temporary file
    echo "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: custom-hosts-config\n  namespace: $NAMESPACE\ndata:\n  hosts: |" > /tmp/custom-hosts-config-configmap.yaml
    echo "$CLUSTER_IP mirantis.azurecr.io" | sed 's/^/    /' >> /tmp/custom-hosts-config-configmap.yaml
    echo "$CLUSTER_IP repos.mirantis.com" | sed 's/^/    /' >> /tmp/custom-hosts-config-configmap.yaml
    echo "$CLUSTER_IP binary.mirantis.com" | sed 's/^/    /' >> /tmp/custom-hosts-config-configmap.yaml
    echo "$CLUSTER_IP mirror.mirantis.com" | sed 's/^/    /' >> /tmp/custom-hosts-config-configmap.yaml
    echo "$CLUSTER_IP deb.nodesource.com" | sed 's/^/    /' >> /tmp/custom-hosts-config-configmap.yaml
    echo "$CLUSTER_IP archive.ubuntu.com" | sed 's/^/    /' >> /tmp/custom-hosts-config-configmap.yaml
    echo "$CLUSTER_IP security.ubuntu.com" | sed 's/^/    /' >> /tmp/custom-hosts-config-configmap.yaml

    # Apply the updated config
    if ! OUTPUT=$(kubectl apply -f /tmp/custom-hosts-config-configmap.yaml 2>&1); then
        echo "Error applying host config: $OUTPUT"
    else
        echo "config updated successfully."
    fi
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: container-proxy
  namespace: proxy-server
  labels:
    app: proxy-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy-server
  template:
    metadata:
      labels:
        app: proxy-server
    spec:
      serviceAccountName: proxy-server-serviceaccount
      initContainers:
        - name: config-updater
          env:
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace      
          image: bitnami/kubectl:latest
          command: ["/bin/sh", "/scripts/update-config.sh"]
          volumeMounts:
          - name: scripts
            mountPath: /scripts    
      containers:
      - name: proxy-http
        image: msr2.konitzer.dev/wkonitzer/proxy-server:latest
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        env:
#        - name: LOGGING_LEVEL
#          value: "DEBUG"  
#        - name: FLASK_DEBUG
#          value: "True" 
        ports:
        - containerPort: 8080
        env:
        - name: MODE
          value: "http"
        resources:
          requests:
            cpu: "10m"
            memory: "100Mi"
          limits:
            memory: "200Mi"
        livenessProbe:
          httpGet:
            path: /health 
            port: 4000
          initialDelaySeconds: 30 
          periodSeconds: 10 
        readinessProbe:
          httpGet:
            path: /health 
            port: 4000
          initialDelaySeconds: 5 
          periodSeconds: 5           
      - name: proxy-https
        image: msr2.konitzer.dev/wkonitzer/proxy-server:latest
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        env:
#        - name: LOGGING_LEVEL
#          value: "DEBUG"  
#        - name: FLASK_DEBUG
#          value: "True"
        ports:
        - containerPort: 8443
        env:
        - name: MODE
          value: "https"
        resources:
          requests:
            cpu: "10m"
            memory: "100Mi"
          limits:
            memory: "200Mi"
        livenessProbe:
          httpGet:
            path: /health 
            port: 4000
          initialDelaySeconds: 30 
          periodSeconds: 10 
        readinessProbe:
          httpGet:
            path: /health 
            port: 4000
          initialDelaySeconds: 5 
          periodSeconds: 5           
        volumeMounts:
        - name: cert-volume
          mountPath: /etc/ssl/certs/
      - name: tinyproxy
        image: docker.io/kalaksi/tinyproxy
        ports:
        - containerPort: 8888
        env:
          - { name: ALLOWED_NETWORKS, value: "0.0.0.0/0" }
          - { name: DISABLE_VIA_HEADER, value: "yes" }
          - { name: MAX_CLIENTS, value: "100" }
          - { name: MAX_SPARE_SERVERS, value: "100" }
          - { name: MIN_SPARE_SERVERS, value: "50" }
          - { name: STAT_HOST, value: "tinyproxy.stats" }
          - { name: LOG_LEVEL, value: "Notice" }
          - { name: TIMEOUT, value: "900" }
        securityContext:
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: custom-hosts-volume
          mountPath: /etc/hosts
          subPath: hosts
      volumes:
      - name: cert-volume
        secret:
          secretName: proxy-server-secret
      - name: custom-hosts
        emptyDir: {}
      - name: custom-hosts-volume
        configMap:
          name: custom-hosts-config
      - name: scripts
        configMap:
          name: updater-script                                    
---
apiVersion: v1
kind: Service
metadata:
  namespace: proxy-server
  name: proxy-service
spec:
  type: LoadBalancer
  selector:
    app: proxy-server
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
  - name: https
    protocol: TCP
    port: 443
    targetPort: 8443
  - name: proxy
    protocol: TCP
    port: 8888
    targetPort: 8888
  loadBalancerSourceRanges:
    - 147.75.90.145/32  
